Input: V ←vehicles(veh1, veh2, ..., vehn), L ← Lanes(L1, L2, ..., Ln)
Output: vehicle id of safe vehicle and unsafe vehicle via lanes
 
1: Initialize veh_count ← {0} for every lane L
2: for each veh in V do
3: Compute the distance between the preceding vehicle
and the succeeding vehicle for a minimum gap:
4: pv dist ← compute preceding veh dist(veh)
5: sv dist ← compute succeeding veh dist(veh)

6: function COMPUTE PRECEDING VEH DIST(veh)

7: pv dist ← ∞
8: for each preceding veh in v on the same lane as
veh do
9: if preceding veh.position < veh.position then
10: dist ← veh.position −
preceding veh.position − preceding veh.length
11: pv dist ← min(pv dist, dist)
12: end if
13: end for
14: return pv dist
15: end function

16: function COMPUTE SUCCEEDING VEH DIST(veh)
17: sv dist ← ∞
18: for each succeeding veh in v on the same lane as veh do
19: if succeeding veh.position > veh.position then
20: dist ← succeeding veh.position −
veh.position − veh.length
21: sv dist ← min(sv dist, dist)
22: end if
23: end for
24: return sv dist
25: end function

26: Calculate the minimum gap: min gap ←
min(pv dist, sv dist)
27: if min gap ≥ 5.00 meters then
28: Set vehicle veh as safe
29: else
30: Increment the vehicle count for the lane of vehicle
veh: veh count[L[veh]] ← veh count[L[veh]] + 1
31: end if
32: end for
33: Return the vehicle count via lanes: veh count
